-- Custom types
create type public.app_permission as enum (
    -- permissions
    'permissions.select', 'permissions.insert', 'permissions.update', 'permissions.delete',
);
create type public.app_role as enum ('admin', 'authorized');

-- USER ROLES
create table public.user_roles (
    id        bigint generated by default as identity primary key,
    user_id   uuid references auth.users on delete cascade not null,
    role      app_role not null,
    unique (user_id, role)
);
comment on table public.user_roles is 'Application roles for each user.';
comment on column public.user_roles.user_id is 'References the supabase auth user.';

-- ROLE PERMISSIONS
create table public.role_permissions (
    id           bigint generated by default as identity primary key,
    role         app_role not null,
    permission   app_permission not null,
    unique (role, permission)
);
comment on table public.role_permissions is 'Application permissions for each role.';

-- authorize with role-based access control (RBAC)
create function public.authorize(
    requested_permission app_permission,
    user_id uuid
)
returns boolean as $$
declare
    bind_permissions int;
begin
    select count(*)
    from public.role_permissions
    inner join public.user_roles on role_permissions.role = user_roles.role
    where role_permissions.permission = authorize.requested_permission
        and user_roles.user_id = authorize.user_id
    into bind_permissions;

    return bind_permissions > 0;
end;
$$ language plpgsql security definer;

-- secure tables
alter table public.user_roles enable row level security;
alter table public.role_permissions enable row level security;
create policy "Allow individual read access" on public.user_roles for select using ( (auth.uid() = user_id) or ( authorize('permissions.select', auth.uid()) ) );
create policy "Allow authorized insert access" on public.user_roles for insert with check ( authorize('permissions.insert', auth.uid()) );
create policy "Allow authorized update access" on public.user_roles for update using ( authorize('permissions.update', auth.uid()) ) with check ( authorize('permissions.update', auth.uid()) );
create policy "Allow authorized delete access" on public.user_roles for delete using ( authorize('permissions.delete', auth.uid()) );